name: Create Issue on First Push

on:
  push:
    branches:
      - main

jobs:
  create_issue:
    runs-on: ubuntu-latest
    steps:
    - name: Check for open issues
      id: check_issues
      run: |
        ISSUES=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     -H "Accept: application/vnd.github.v3+json" \
                     https://api.github.com/repos/${{ github.repository }}/issues?state=open)
        COUNT=$(echo "$ISSUES" | jq '. | length')
        if [[ "$COUNT" -eq 0 ]]; then
          echo "::set-output name=has_issues::false"
        else
          echo "::set-output name=has_issues::true"
        fi
      continue-on-error: true

    - name: 1 - Pino Buzzer
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '1 - Pino Buzzer',
            body: 'Definir e configurar pino que será usado para conectar o buzzer.
                  - [ ] Atualizar `README.md` com definição do pino.'
          }
          github.issues.create(issue)

    - name: 2 - Pino botão start/pause
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '2 - Pino botão start/pause',
            body: '
                  Definir e configurar pino que será usado para conectar o botão de start/pause.

                  - [ ] Atualizar `README.md` com definição do pino.
                  - [ ] Inserir `#defines` no  `main.c` com valores certos

                  ```c
                  #define START_PIO
                  #define START_PIO_ID
                  #define START_PIO_IDX
                  #define START_PIO_IDX_MASK
                  ```
                  - [x] Atualizar função  `init()` configurando o pino do botão como input

                  Dicas (opcional):

                  - [ ] Criar função `int get_startstop();` que retorna o status do botão (1/0)
            '
          }
          github.issues.create(issue)

    - name: 3 - Pino seleção musica
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '3 - Pino seleção musica',
            body: '
                  Definir e configurar pino que será usado para conectar o botão de seleção musical.

                  - [ ] Atualizar `README.md` com definição do pino.
                  - [ ] Inserir `#defines` no  `main.c` com valores certos

                  ```c
                  #define SELECAO_PIO
                  #define SELECAO_PIO_ID
                  #define SELECAO_PIO_IDX
                  #define SELECAO_PIO_IDX_MASK
                  ```

                  - [ ] Atualizar função  `init()` configurando o pino do botão como input

                  Dicas (opcional):

                  - [ ] Criar função `int get_selecao();` que retorna o status do botão (1/0)
            '
          }
          github.issues.create(issue)

    - name: 4 - buzzer_test(int freq)
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '4 - buzzer_test(int freq)',
            body: '
                  Crie uma função (buzzer_test(int freq)) que gera no pino do
                  buzzer uma onda quadrada de frequência definida, para isso você
                  deve usar:

                  - `pio_set()`
                  - `pio_clear()`
                  - `delay_ns()` / `delay_ms`

                  :warning: Lembre que a frequência é definido em Hz.

                  - [ ] Implementar funcão
                  - [ ] Link para um vídeo da função funcionando
            '
          }
          github.issues.create(issue)

    - name: 5 - Função tone
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '5 - Função tone',
            body: '
                  Criar função `tone` que gera um tom no pino do buzzer. Para
                  mais informações acesse:

                  - https://insper.github.io/ComputacaoEmbarcada/APS-1-Musical-software/#tone

                  Para validar execute algumas notas por tempos diferentes.

                  ```c
                  for (int freq=200; freq<5000; freq+=500){
                    tone(freq, 200 + freq/2);
                    delay_ms(200);
                  }
                  ```
            '
          }
          github.issues.create(issue)

    - name: 6 - Pino Buzzer
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '6 - Pino Buzzer',
            body: '
                  Incorporar no código `#define` das notas
                  e também vetor `melody` que define a música (tom e tempo).

                  **Entenda o código exemplo antes de seguir em frente.**

                  Usar como base a música do super Mario Bros:

                  - https://github.com/robsoncouto/arduino-songs/blob/3b8ed10f644cb150bc3fe39c854546f5b9331f71/supermariobros/supermariobros.ino#L9

                  - Variáveis: `tempo`, `notes`, `wholenote`, `divider`, `noteDuration`
            '
          }
          github.issues.create(issue)

    - name: 7 - Pino Buzzer
      if: steps.check_issues.outputs.has_issues == 'false'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.SECRET}}
        script: |
          const issue = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '7 - Pino Buzzer',
            body: '
                  Incorporar `for` que varre a música e chama a função tone.

                  **Entenda o código exemplo antes de seguir em frente.**

                  - https://github.com/robsoncouto/arduino-songs/blob/3b8ed10f644cb150bc3fe39c854546f5b9331f71/supermariobros/supermariobros.ino#L213

                  Se tudo tiver certo quando executar o código vocês devem escutar a música do Mario.

                  Dicas:

                  - **Antes de tudo, entenda o código!!!**
                  - A função `tone` que criamos é diferente da função `tone` do exemplo
                  - A função `delay` é diferente
                  - Remover a chamada de função `noTone` (diferente do arduino nós não precisamos dela)
            '
          }
          github.issues.create(issue)
